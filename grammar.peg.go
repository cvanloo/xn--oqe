package markup

// Code generated by /home/attaboy/.cache/go-build/77/77eef4f33721660558ef6309d68f99f4181efac48cff90e397c5552a291dec15-d/peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleDocument
	ruleMetas
	ruleMeta
	ruleKey
	ruleVal
	ruleQuotedString
	ruleQuotedStringChar
	rule_
	rule__
	ruleEND
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
)

var rul3s = [...]string{
	"Unknown",
	"Document",
	"Metas",
	"Meta",
	"Key",
	"Val",
	"QuotedString",
	"QuotedStringChar",
	"_",
	"__",
	"END",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Metas    map[string]string
	key, val string
	text     strings.Builder

	Buffer string
	buffer []rune
	rules  [19]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Metas[p.key] = p.val
		case ruleAction1:
			p.key = text
		case ruleAction2:
			p.val = p.text.String()
			p.text.Reset()
		case ruleAction3:
			p.val = text
		case ruleAction4:
			p.text.WriteString(text)
		case ruleAction5:
			p.text.WriteString("\\")
		case ruleAction6:
			p.text.WriteString("\"")

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Document <- <(Metas? _ END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleMetas]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[rule_]() {
					goto l0
				}
				{
					position4 := position
					{
						position5, tokenIndex5 := position, tokenIndex
						if !matchDot() {
							goto l5
						}
						goto l0
					l5:
						position, tokenIndex = position5, tokenIndex5
					}
					add(ruleEND, position4)
				}
				add(ruleDocument, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Metas <- <((_ Meta __ '\n' Metas) / (_ Meta))> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleMeta]() {
						goto l9
					}
					{
						position10 := position
					l11:
						{
							position12, tokenIndex12 := position, tokenIndex
							{
								position13, tokenIndex13 := position, tokenIndex
								if buffer[position] != rune(' ') {
									goto l14
								}
								position++
								goto l13
							l14:
								position, tokenIndex = position13, tokenIndex13
								if buffer[position] != rune('\t') {
									goto l12
								}
								position++
							}
						l13:
							goto l11
						l12:
							position, tokenIndex = position12, tokenIndex12
						}
						add(rule__, position10)
					}
					if buffer[position] != rune('\n') {
						goto l9
					}
					position++
					if !_rules[ruleMetas]() {
						goto l9
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
					if !_rules[rule_]() {
						goto l6
					}
					if !_rules[ruleMeta]() {
						goto l6
					}
				}
			l8:
				add(ruleMetas, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 Meta <- <(Key _ '=' _ Val Action0)> */
		func() bool {
			position15, tokenIndex15 := position, tokenIndex
			{
				position16 := position
				{
					position17 := position
					{
						position18 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l15
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l15
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l15
								}
								position++
							}
						}

					l20:
						{
							position21, tokenIndex21 := position, tokenIndex
							{
								switch buffer[position] {
								case '1', '2', '3', '4', '5', '6':
									if c := buffer[position]; c < rune('1') || c > rune('6') {
										goto l21
									}
									position++
								case '_':
									if buffer[position] != rune('_') {
										goto l21
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l21
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l21
									}
									position++
								}
							}

							goto l20
						l21:
							position, tokenIndex = position21, tokenIndex21
						}
						add(rulePegText, position18)
					}
					{
						add(ruleAction1, position)
					}
					add(ruleKey, position17)
				}
				if !_rules[rule_]() {
					goto l15
				}
				if buffer[position] != rune('=') {
					goto l15
				}
				position++
				if !_rules[rule_]() {
					goto l15
				}
				{
					position24 := position
					{
						position25, tokenIndex25 := position, tokenIndex
						{
							position27 := position
							if buffer[position] != rune('"') {
								goto l26
							}
							position++
						l28:
							{
								position29, tokenIndex29 := position, tokenIndex
								{
									position30 := position
									{
										position31, tokenIndex31 := position, tokenIndex
										{
											position33 := position
											{
												position34, tokenIndex34 := position, tokenIndex
												{
													position35, tokenIndex35 := position, tokenIndex
													if buffer[position] != rune('\\') {
														goto l36
													}
													position++
													goto l35
												l36:
													position, tokenIndex = position35, tokenIndex35
													if buffer[position] != rune('"') {
														goto l34
													}
													position++
												}
											l35:
												goto l32
											l34:
												position, tokenIndex = position34, tokenIndex34
											}
											if !matchDot() {
												goto l32
											}
											add(rulePegText, position33)
										}
										{
											add(ruleAction4, position)
										}
										goto l31
									l32:
										position, tokenIndex = position31, tokenIndex31
										if buffer[position] != rune('\\') {
											goto l38
										}
										position++
										if buffer[position] != rune('\\') {
											goto l38
										}
										position++
										{
											add(ruleAction5, position)
										}
										goto l31
									l38:
										position, tokenIndex = position31, tokenIndex31
										if buffer[position] != rune('\\') {
											goto l29
										}
										position++
										if buffer[position] != rune('"') {
											goto l29
										}
										position++
										{
											add(ruleAction6, position)
										}
									}
								l31:
									add(ruleQuotedStringChar, position30)
								}
								goto l28
							l29:
								position, tokenIndex = position29, tokenIndex29
							}
							if buffer[position] != rune('"') {
								goto l26
							}
							position++
							add(ruleQuotedString, position27)
						}
						{
							add(ruleAction2, position)
						}
						goto l25
					l26:
						position, tokenIndex = position25, tokenIndex25
						{
							position42 := position
						l43:
							{
								position44, tokenIndex44 := position, tokenIndex
								{
									position45, tokenIndex45 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l45
									}
									position++
									goto l44
								l45:
									position, tokenIndex = position45, tokenIndex45
								}
								if !matchDot() {
									goto l44
								}
								goto l43
							l44:
								position, tokenIndex = position44, tokenIndex44
							}
							add(rulePegText, position42)
						}
						{
							add(ruleAction3, position)
						}
					}
				l25:
					add(ruleVal, position24)
				}
				{
					add(ruleAction0, position)
				}
				add(ruleMeta, position16)
			}
			return true
		l15:
			position, tokenIndex = position15, tokenIndex15
			return false
		},
		/* 3 Key <- <(<(((&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z])) ((&('1' | '2' | '3' | '4' | '5' | '6') [1-6]) | (&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> Action1)> */
		nil,
		/* 4 Val <- <((QuotedString Action2) / (<(!'\n' .)*> Action3))> */
		nil,
		/* 5 QuotedString <- <('"' QuotedStringChar* '"')> */
		nil,
		/* 6 QuotedStringChar <- <((<(!('\\' / '"') .)> Action4) / ('\\' '\\' Action5) / ('\\' '"' Action6))> */
		nil,
		/* 7 _ <- <((&('\t') '\t') | (&('\n') '\n') | (&(' ') ' '))*> */
		func() bool {
			{
				position53 := position
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						switch buffer[position] {
						case '\t':
							if buffer[position] != rune('\t') {
								goto l55
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l55
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l55
							}
							position++
						}
					}

					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(rule_, position53)
			}
			return true
		},
		/* 8 __ <- <(' ' / '\t')*> */
		nil,
		/* 9 END <- <!.> */
		nil,
		/* 11 Action0 <- <{ p.Metas[p.key] = p.val }> */
		nil,
		nil,
		/* 13 Action1 <- <{ p.key = text }> */
		nil,
		/* 14 Action2 <- <{ p.val = p.text.String(); p.text.Reset() }> */
		nil,
		/* 15 Action3 <- <{ p.val = text }> */
		nil,
		/* 16 Action4 <- <{ p.text.WriteString(text) }> */
		nil,
		/* 17 Action5 <- <{ p.text.WriteString("\\") }> */
		nil,
		/* 18 Action6 <- <{ p.text.WriteString("\"") }> */
		nil,
	}
	p.rules = _rules
	return nil
}
